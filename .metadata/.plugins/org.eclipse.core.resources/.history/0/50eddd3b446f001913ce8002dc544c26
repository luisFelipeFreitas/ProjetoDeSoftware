package servico;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import dao.HabilidadeDAO;
import dao.EquipamentoDAO;
import excecao.DataDeHabilidadeInvalidaException;
import excecao.InfraestruturaException;
import excecao.HabilidadeNaoEncontradoException;
import excecao.ObjetoNaoEncontradoException;
import excecao.EquipamentoNaoEncontradoException;
import excecao.ValorDeHabilidadeInvalidoException;
import modelo.Habilidade;
import modelo.Equipamento;
import util.FabricaDeDAOs;
import util.JPAUtil;
import util.Util;

// @Service
public class HabilidadeAppService {
    private static HabilidadeDAO habilidadeDAO = FabricaDeDAOs.getDAO(HabilidadeDAO.class);
    private static EquipamentoDAO produtoDAO = FabricaDeDAOs.getDAO(EquipamentoDAO.class);

    public long inclui(Habilidade umHabilidade)
	    throws EquipamentoNaoEncontradoException, ValorDeHabilidadeInvalidoException, DataDeHabilidadeInvalidaException {
	// A execução do método recuperaUmEquipamentoComLock(id) abaixo
	// impede que dois habilidades sejam cadastrados em paralelo.
	// Como este método põe um lock em Equipamento, a inserção de
	// dois habilidades acontece sempre em série, i. é, obedecendo
	// a uma fila. Isto impede que o valor do segundo habilidade seja
	// inferior ao valor do primeiro ou que se tente cadastrar um
	// habilidade para um produto que tenha sido removido.
	try {
	    // NENHUMA VALIDAÇÃO ESTÁ SENDO REALIZADA AQUI!!!

	    JPAUtil.beginTransaction();

	    Equipamento umEquipamento = umHabilidade.getEquipamento();

	    try {
		produtoDAO.recuperaUmEquipamentoComLock(umEquipamento.getId());
	    } catch (ObjetoNaoEncontradoException e) {
		throw new EquipamentoNaoEncontradoException("Equipamento não encontado");
	    }

	    Habilidade ultimoHabilidade;
	    try {
		ultimoHabilidade = habilidadeDAO.recuperaUltimoHabilidade(umEquipamento);
	    } catch (ObjetoNaoEncontradoException e) {
		ultimoHabilidade = null;
	    }

	    double valorUltimoHabilidade;
	    Calendar dataUltimoHabilidade;

	    if (ultimoHabilidade == null) {
		valorUltimoHabilidade = umEquipamento.getHabilidadeMinimo() - 1;
		dataUltimoHabilidade = umEquipamento.getDataCadastro();
	    } else {
		valorUltimoHabilidade = ultimoHabilidade.getValor();
		dataUltimoHabilidade = ultimoHabilidade.getDataCriacao();
	    }

	    if (umHabilidade.getValor() <= valorUltimoHabilidade) {
		throw new ValorDeHabilidadeInvalidoException("O valor do habilidade tem que ser superior a " + valorUltimoHabilidade);
	    }

	    if (umHabilidade.getDataCriacao().before(dataUltimoHabilidade)) {
		throw new DataDeHabilidadeInvalidaException(
			"A data de emissão do habilidade não pode ser anterior a " + Util.calendarToStr(dataUltimoHabilidade));
	    }

	    GregorianCalendar hoje = new GregorianCalendar();

	    if (umHabilidade.getDataCriacao().after(hoje)) {
		throw new DataDeHabilidadeInvalidaException(
			"A data de emissão do habilidade não pode ser posterior à data de hoje: "
				+ Util.calendarToStr(hoje));
	    }

	    long numero = habilidadeDAO.inclui(umHabilidade);

	    JPAUtil.commitTransaction();

	    return numero;
	} catch (EquipamentoNaoEncontradoException | 
		 ValorDeHabilidadeInvalidoException | 
		 DataDeHabilidadeInvalidaException e) {
	    try {
		JPAUtil.rollbackTransaction();
	    } catch (InfraestruturaException ie) {
	    }

	    throw e;
	} catch (InfraestruturaException e) {
	    try {
		JPAUtil.rollbackTransaction();
	    } catch (InfraestruturaException ie) {
	    }

	    throw e;
	} finally {
	    JPAUtil.closeEntityManager();
	}
    }

    public void exclui(long numero) throws HabilidadeNaoEncontradoException {
	try {
	    JPAUtil.beginTransaction();

	    habilidadeDAO.exclui(numero);

	    JPAUtil.commitTransaction();
	} catch (ObjetoNaoEncontradoException e) {
	    JPAUtil.rollbackTransaction();

	    throw new HabilidadeNaoEncontradoException("Habilidade não encontrado");
	} catch (InfraestruturaException e) {
	    try {
		JPAUtil.rollbackTransaction();
	    } catch (InfraestruturaException ie) {
	    }

	    throw e;
	} finally {
	    JPAUtil.closeEntityManager();
	}
    }

    public Habilidade recuperaUmHabilidade(long numero) throws HabilidadeNaoEncontradoException {
	try {
	    Habilidade umHabilidade = habilidadeDAO.recuperaUmHabilidade(numero);

	    return umHabilidade;
	} catch (ObjetoNaoEncontradoException e) {
	    throw new HabilidadeNaoEncontradoException("Habilidade não encontrado");
	} finally {
	    JPAUtil.closeEntityManager();
	}
    }

    public List<Habilidade> recuperaHabilidades() {
	try {
	    return habilidadeDAO.recuperaHabilidades();
	} finally {
	    JPAUtil.closeEntityManager();
	}
    }
}