
import java.util.List;

import corejava.Console;
import excecao.JogadorNaoEncontradoException;
import modelo.Personagem;
import modelo.Jogador;
import servico.JogadorAppService;
import util.Util;

public class PrincipalJogador {
	public static void main(String[] args) {
		String username;
		String senha;
		String email;
		Jogador umJogador;

		JogadorAppService jogadorAppService = new JogadorAppService();

		boolean continua = true;
		while (continua) {
			System.out.println('\n' + "O que você deseja fazer?");
			System.out.println('\n' + "1. Cadastrar um jogador");
			System.out.println("2. Alterar um jogador");
			System.out.println("3. Remover um jogador");
			System.out.println("4. Listar um jogador e suas personagens");
			System.out.println("5. Listar todas as jogadores e suas personagens");
			System.out.println("6. Sair");

			int opcao = Console.readInt('\n' + "Digite um número entre 1 e 6:");

			switch (opcao) {
			case 1: {
				username = Console.readLine('\n' + "Informe o username do jogador: ");
				senha = Console.readLine("Informe a senha do jogador: ");
				email = Console.readLine("Informe o email do Jogador: ");

				Jogador jogador = new Jogador(username, senha, email);

				long numero = jogadorAppService.inclui(jogador);

				System.out.println('\n' + "Jogador número " + numero + " incluído com sucesso!");

				break;
			}

			case 2: {
				int resposta = Console.readInt('\n' + "Digite o número do jogador que você deseja alterar: ");

				try {
					umJogador = jogadorAppService.recuperaUmJogador(resposta);
					System.out.println(umJogador.getPersonagens().size());
				} catch (JogadorNaoEncontradoException e) {
					System.out.println('\n' + e.getMessage());
					break;
				} catch(Exception e) {
					umJogador.getPersonagens()
				}

				System.out
						.println('\n' + "Número = " + umJogador.getId() + "    Username = " + umJogador.getUsername());

				System.out.println('\n' + "O que você deseja alterar?");
				System.out.println('\n' + "1. Email");
				System.out.println("\n2. Senha");

				int opcaoAlteracao = Console.readInt('\n' + "Digite um número de 1 a 2:");

				switch (opcaoAlteracao) {
				case 1:
					String novoEmail = Console.readLine("Digite o novo email: ");
					umJogador.setEmail(novoEmail);

					try {
						jogadorAppService.altera(umJogador);

						System.out.println('\n' + "Alteração de jogador efetuada com sucesso!");
					} catch (JogadorNaoEncontradoException e) {
						System.out.println('\n' + e.getMessage());
					}

					break;

				case 2:
					String novaSenha = Console.readLine("Digite a nova senha: ");
					umJogador.setSenha(novaSenha);

					try {
						jogadorAppService.altera(umJogador);

						System.out.println('\n' + "Alteração de descrição efetuada " + "com sucesso!");
					} catch (JogadorNaoEncontradoException e) {
						System.out.println('\n' + e.getMessage());
					}

					break;

				default:
					System.out.println('\n' + "Opção inválida!");
				}

				break;
			}

			case 3: {
				int resposta = Console.readInt('\n' + "Digite o número do jogador que você deseja remover: ");

				try {
					umJogador = jogadorAppService.recuperaUmJogador(resposta);
				} catch (JogadorNaoEncontradoException e) {
					System.out.println('\n' + e.getMessage());
					break;
				}

				System.out.println('\n' + "Número = " + umJogador.getId() + "    Username = " + umJogador.getUsername()
						+ "   E-mail= " + umJogador.getEmail());

				String resp = Console.readLine('\n' + "Confirma a remoção do jogador?");

				if (resp.equals("s")) {
					try {
						jogadorAppService.exclui(umJogador.getId());
						System.out.println('\n' + "Jogador removido com sucesso!");
					} catch (JogadorNaoEncontradoException e) {
						System.out.println('\n' + e.getMessage());
					}
				} else {
					System.out.println('\n' + "Jogador não removido.");
				}

				break;
			}

			case 4: {
				long numero = Console.readInt('\n' + "Informe o número do jogador: ");

				try {
					umJogador = jogadorAppService.recuperaUmJogadorEPersonagens(numero);
				} catch (JogadorNaoEncontradoException e) {
					System.out.println('\n' + e.getMessage());
					break;
				}

				System.out.println('\n' + "Número = " + umJogador.getId() + "    Username = " + umJogador.getUsername()
						+ "   E-mail= " + umJogador.getEmail());

				List<Personagem> personagens = umJogador.getPersonagens();

				for (Personagem personagem : personagens) {
					System.out.println('\n' + "      Jogador número = " + personagem.getId() + "  Nome do personagem = "
							+ personagem.getNome() + "  Sexo  = " + personagem.getSexo() + " Classe= "
							+ personagem.getClasse());
				}

				break;
			}

			case 5: {
				List<Jogador> jogadores = jogadorAppService.recuperaJogadoresEPersonagens();

				if (jogadores.size() != 0) {
					System.out.println("");

					for (Jogador jogador : jogadores) {
						System.out.println('\n' + "Número = " + jogador.getId() + "    Username = "
								+ jogador.getUsername() + "   E-mail= " + jogador.getEmail());

						List<Personagem> personagens = jogador.getPersonagens();

						for (Personagem personagem : personagens) {
							System.out.println(
									'\n' + "      Jogador número = " + personagem.getId() + "  Nome do personagem = "
											+ personagem.getNome() + "  Sexo  = " + personagem.getSexo());
						}
					}
				} else {
					System.out.println('\n' + "Não há jogadors cadastradas com esta descrição.");
				}

				break;
			}

			case 6: {
				continua = false;
				break;
			}

			default:
				System.out.println('\n' + "Opção inválida!");
			}
		}
	}
}
