package servico;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import dao.RotaDAO;
import excecao.InfraestruturaException;
import excecao.ObjetoNaoEncontradoException;
import excecao.RotaNaoEncontradaException;
import excecao.FrotaNaoEncontradaException;
import modelo.Rota;
import modelo.Frota;
import modelo.Rota;
import util.FabricaDeDAOs;
import util.JPAUtil;
import util.Util;
import dao.FrotaDAO;

public class RotaAppService {
    private static RotaDAO rotaDAO = FabricaDeDAOs.getDAO(RotaDAO.class);

    public long inclui(Rota umaRota)
    	    throws FrotaNaoEncontradaException {

    	try {
    	    // NENHUMA VALIDAÇÃO ESTÁ SENDO REALIZADA AQUI!!!

    	    JPAUtil.beginTransaction();

    	    Frota umaFrota = umaRota.getFrota();

    	    try {
    		frotaDAO.recuperaUmFrotaComLock(umFrota.getId());
    	    } catch (ObjetoNaoEncontradoException e) {
    		throw new FrotaNaoEncontradoException("Frota não encontado");
    	    }

    	    Rota ultimoRota;
    	    try {
    		ultimoRota = lanceDAO.recuperaUltimoRota(umFrota);
    	    } catch (ObjetoNaoEncontradoException e) {
    		ultimoRota = null;
    	    }

    	    double valorUltimoRota;
    	    Calendar dataUltimoRota;

    	    if (ultimoRota == null) {
    		valorUltimoRota = umFrota.getRotaMinimo() - 1;
    		dataUltimoRota = umFrota.getDataCadastro();
    	    } else {
    		valorUltimoRota = ultimoRota.getValor();
    		dataUltimoRota = ultimoRota.getDataCriacao();
    	    }

    	    if (umRota.getValor() <= valorUltimoRota) {
    		throw new ValorDeRotaInvalidoException("O valor do lance tem que ser superior a " + valorUltimoRota);
    	    }

    	    if (umRota.getDataCriacao().before(dataUltimoRota)) {
    		throw new DataDeRotaInvalidaException(
    			"A data de emissão do lance não pode ser anterior a " + Util.calendarToStr(dataUltimoRota));
    	    }

    	    GregorianCalendar hoje = new GregorianCalendar();

    	    if (umRota.getDataCriacao().after(hoje)) {
    		throw new DataDeRotaInvalidaException(
    			"A data de emissão do lance não pode ser posterior à data de hoje: "
    				+ Util.calendarToStr(hoje));
    	    }

    	    long numero = lanceDAO.inclui(umRota);

    	    JPAUtil.commitTransaction();

    	    return numero;
    	} catch (FrotaNaoEncontradoException | 
    		 ValorDeRotaInvalidoException | 
    		 DataDeRotaInvalidaException e) {
    	    try {
    		JPAUtil.rollbackTransaction();
    	    } catch (InfraestruturaException ie) {
    	    }

    	    throw e;
    	} catch (InfraestruturaException e) {
    	    try {
    		JPAUtil.rollbackTransaction();
    	    } catch (InfraestruturaException ie) {
    	    }

    	    throw e;
    	} finally {
    	    JPAUtil.closeEntityManager();
    	}
        }

    public void altera(Rota umaRota) throws RotaNaoEncontradaException {
	try {
	    JPAUtil.beginTransaction();

	    rotaDAO.altera(umaRota);

	    JPAUtil.commitTransaction();
	} catch (ObjetoNaoEncontradoException e) {
	    JPAUtil.rollbackTransaction();

	    throw new RotaNaoEncontradaException("Rota não encontrado");
	} catch (InfraestruturaException e) {
	    try {
		JPAUtil.rollbackTransaction();
	    } catch (InfraestruturaException ie) {
	    }

	    throw e;
	} finally {
	    JPAUtil.closeEntityManager();
	}
    }

    public void exclui(long numero) throws RotaNaoEncontradaException {
	try {
	    JPAUtil.beginTransaction();

	    rotaDAO.exclui(numero);

	    JPAUtil.commitTransaction();
	} catch (ObjetoNaoEncontradoException e) {
	    JPAUtil.rollbackTransaction();

	    throw new RotaNaoEncontradaException("Rota não encontrado");
	} catch (InfraestruturaException e) {
	    try {
		JPAUtil.rollbackTransaction();
	    } catch (InfraestruturaException ie) {
	    }

	    throw e;
	} finally {
	    JPAUtil.closeEntityManager();
	}
    }

    public Rota recuperaUmaRota(long numero) throws RotaNaoEncontradaException {
	try {
	    Rota umaRota = rotaDAO.recuperaUmaRota(numero);

	    return umaRota;
	} catch (ObjetoNaoEncontradoException e) {
	    throw new RotaNaoEncontradaException("Rota não encontrado");
	} finally {
	    JPAUtil.closeEntityManager();
	}
    }

    public Rota recuperaUmaRotaEParadas(long numero) throws RotaNaoEncontradaException {
	try {
	    return rotaDAO.recuperaUmaRotaEParadas(numero);
	} catch (ObjetoNaoEncontradoException e) {
	    throw new RotaNaoEncontradaException("Rota não encontrado");
	} finally {
	    JPAUtil.closeEntityManager();
	}
    }

    public List<Rota> recuperaRotasEParadas() {
	try {
	    return rotaDAO.recuperaRotasEParadas();
	} finally {
	    JPAUtil.closeEntityManager();
	}
    }
}